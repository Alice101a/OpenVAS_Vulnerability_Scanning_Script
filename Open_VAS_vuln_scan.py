import gvm
from gvm.protocols.gmp import Gmp
import argparse

def connect_to_openvas(host, port, username, password):
    try:
        gmp = Gmp()
        gmp.connect(host, port, username, password)
        return gmp
    except gvm.errors.GvmError as e:
        print(f"Failed to connect to OpenVAS: {e}")
        return None

def create_target(gmp, target_host):
    try:
        return gmp.create_target(target_host)
    except gvm.errors.GvmError as e:
        print(f"Failed to create target: {e}")
        return None

def create_task(gmp, target_id, config_id):
    try:
        return gmp.create_task(target_id=target_id, config_id=config_id)
    except gvm.errors.GvmError as e:
        print(f"Failed to create task: {e}")
        return None

def start_task(gmp, task_id):
    try:
        gmp.start_task(task_id)
        return True
    except gvm.errors.GvmError as e:
        print(f"Failed to start task: {e}")
        return False

def wait_for_task_completion(gmp, task_id):
    while True:
        task_status = gmp.get_task_status(task_id)
        if task_status == "Done":
            break
        elif task_status == "Failed":
            print("Scan failed. Check OpenVAS Manager for more details.")
            return False
    return True

def get_results(gmp, task_id):
    try:
        return gmp.get_results(task_id=task_id)
    except gvm.errors.GvmError as e:
        print(f"Failed to fetch scan results: {e}")
        return []

def print_vulnerabilities(results):
    if not results:
        print("No vulnerabilities found.")
    else:
        print("Vulnerabilities found:")
        for result in results:
            print(f"Vulnerability: {result.name}, Severity: {result.severity}")

def scan_with_openvas(host, port, username, password, target_host, config_id):
    gmp = connect_to_openvas(host, port, username, password)
    if not gmp:
        return

    target = create_target(gmp, target_host)
    if not target:
        return

    task = create_task(gmp, target.id, config_id)
    if not task:
        return

    if not start_task(gmp, task.id):
        return

    if not wait_for_task_completion(gmp, task.id):
        return

    results = get_results(gmp, task.id)
    print_vulnerabilities(results)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="OpenVAS Vulnerability Scanner")
    parser.add_argument("host", help="OpenVAS Manager host")
    parser.add_argument("port", type=int, help="OpenVAS Manager port")
    parser.add_argument("username", help="OpenVAS Manager username")
    parser.add_argument("password", help="OpenVAS Manager password")
    parser.add_argument("target_host", help="Target host IP to scan")
    parser.add_argument("config_id", help="OpenVAS scan configuration ID")

    args = parser.parse_args()

    scan_with_openvas(args.host, args.port, args.username, args.password, args.target_host, args.config_id)
